{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "프로젝트 초기 설정 및 개발 환경 구축",
        "description": "React 기반 프론트엔드와 Node.js/Express 백엔드 프로젝트 구조 설정, Docker 컨테이너화, PostgreSQL/Redis 데이터베이스 환경 구성",
        "details": "1. 프로젝트 디렉토리 구조 생성 (frontend/, backend/, docker/, docs/)\n2. React 18+ 프로젝트 초기화 (CRA 또는 Vite 사용)\n3. Node.js/Express 서버 설정 with TypeScript\n4. Docker Compose 파일 작성 (nginx, frontend, backend, postgres, redis)\n5. 환경변수 설정 파일 구성 (.env.example)\n6. ESLint, Prettier 설정\n7. Git 저장소 초기화 및 .gitignore 설정\n\n```yaml\n# docker-compose.yml 예시\nversion: '3.8'\nservices:\n  nginx:\n    image: nginx:alpine\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n  frontend:\n    build: ./frontend\n    environment:\n      - REACT_APP_API_URL=http://backend:3000\n  backend:\n    build: ./backend\n    environment:\n      - DATABASE_URL=postgresql://user:pass@postgres:5432/synology_dashboard\n      - REDIS_URL=redis://redis:6379\n  postgres:\n    image: postgres:15\n    environment:\n      - POSTGRES_DB=synology_dashboard\n      - POSTGRES_USER=admin\n      - POSTGRES_PASSWORD=secure_password\n  redis:\n    image: redis:7-alpine\n```",
        "testStrategy": "1. Docker Compose up으로 모든 서비스가 정상 실행되는지 확인\n2. 각 서비스 간 네트워크 연결 테스트 (frontend->backend, backend->db)\n3. 환경변수가 올바르게 로드되는지 확인\n4. TypeScript 컴파일 에러 없이 빌드되는지 검증",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "데이터베이스 스키마 설계 및 ORM 설정",
        "description": "PostgreSQL 데이터베이스 스키마 설계, Prisma ORM 설정, 마이그레이션 시스템 구축, 기본 엔티티 모델 구현",
        "details": "1. Prisma ORM 설치 및 초기화\n2. 데이터베이스 스키마 정의 (schema.prisma)\n3. 엔티티 모델 구현: User, Server, Service, Deployment, ServerGroup, Alert\n4. 관계 설정 및 인덱스 최적화\n5. Seed 데이터 스크립트 작성\n6. 마이그레이션 스크립트 설정\n\n```prisma\n// schema.prisma 예시\nmodel Server {\n  id          String   @id @default(uuid())\n  name        String\n  description String?\n  ipAddress   String\n  sshPort     Int      @default(22)\n  dockerPort  Int?\n  username    String\n  password    String?  // 암호화 필요\n  privateKey  String?  // 암호화 필요\n  status      ServerStatus @default(OFFLINE)\n  cpuUsage    Float    @default(0)\n  memoryUsage Float    @default(0)\n  diskUsage   Float    @default(0)\n  tags        String[]\n  groups      ServerGroup[]\n  services    Service[]\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n  \n  @@index([status])\n  @@index([ipAddress])\n}\n\nenum ServerStatus {\n  ONLINE\n  OFFLINE\n  ERROR\n}\n```",
        "testStrategy": "1. Prisma 마이그레이션 실행 테스트\n2. 모든 CRUD 작업이 정상 동작하는지 단위 테스트\n3. 외래 키 제약조건 및 데이터 무결성 테스트\n4. 성능 테스트를 위한 대량 데이터 삽입 및 쿼리 테스트",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "JWT 기반 인증 시스템 구현",
        "description": "JWT 토큰 기반 사용자 인증/인가 시스템 구현, 역할 기반 접근 제어(RBAC) 구축, 보안 미들웨어 개발",
        "details": "1. JWT 라이브러리 설정 (jsonwebtoken)\n2. 사용자 모델에 역할(Role) 및 권한(Permission) 추가\n3. 인증 미들웨어 구현\n4. 로그인/로그아웃 API 엔드포인트 구현\n5. Refresh Token 로직 구현\n6. bcrypt를 사용한 비밀번호 해싱\n7. CORS 설정 및 보안 헤더 추가\n\n```typescript\n// auth.middleware.ts\nimport jwt from 'jsonwebtoken';\nimport { Request, Response, NextFunction } from 'express';\n\nexport const authenticateToken = async (req: Request, res: Response, next: NextFunction) => {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n  \n  if (!token) {\n    return res.status(401).json({ error: 'Access token required' });\n  }\n  \n  try {\n    const decoded = jwt.verify(token, process.env.JWT_SECRET!);\n    req.user = decoded;\n    next();\n  } catch (error) {\n    return res.status(403).json({ error: 'Invalid or expired token' });\n  }\n};\n\n// 역할 기반 권한 체크\nexport const authorize = (roles: string[]) => {\n  return (req: Request, res: Response, next: NextFunction) => {\n    if (!roles.includes(req.user.role)) {\n      return res.status(403).json({ error: 'Insufficient permissions' });\n    }\n    next();\n  };\n};\n```",
        "testStrategy": "1. JWT 토큰 생성 및 검증 단위 테스트\n2. 인증 플로우 E2E 테스트 (로그인 -> 토큰 발급 -> API 호출)\n3. 권한 없는 접근 시도 시 403 에러 반환 확인\n4. 토큰 만료 및 갱신 로직 테스트\n5. SQL Injection, XSS 등 보안 취약점 테스트",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "서버 관리 API 및 SSH 연결 모듈 구현",
        "description": "시놀로지 서버 CRUD API 구현, SSH2 라이브러리를 사용한 원격 명령 실행 모듈 개발, 연결 풀 관리 시스템 구축",
        "details": "1. 서버 관리 RESTful API 구현 (GET, POST, PUT, DELETE /api/servers)\n2. node-ssh2 라이브러리 설정 및 연결 풀 구현\n3. SSH 키 및 패스워드 AES-256 암호화/복호화 모듈\n4. 서버 상태 확인 및 리소스 모니터링 명령어 실행\n5. 비동기 명령 실행 및 결과 스트리밍\n6. 연결 재시도 및 타임아웃 로직 구현\n\n```typescript\n// ssh.service.ts\nimport { Client } from 'ssh2';\nimport crypto from 'crypto';\n\nexport class SSHService {\n  private connectionPool: Map<string, Client> = new Map();\n  \n  async executeCommand(serverId: string, command: string): Promise<string> {\n    const connection = await this.getConnection(serverId);\n    \n    return new Promise((resolve, reject) => {\n      connection.exec(command, (err, stream) => {\n        if (err) return reject(err);\n        \n        let output = '';\n        stream.on('data', (data: Buffer) => {\n          output += data.toString();\n        });\n        \n        stream.on('close', () => {\n          resolve(output);\n        });\n      });\n    });\n  }\n  \n  private async getConnection(serverId: string): Promise<Client> {\n    if (this.connectionPool.has(serverId)) {\n      return this.connectionPool.get(serverId)!;\n    }\n    \n    const server = await this.getServerDetails(serverId);\n    const client = new Client();\n    \n    await new Promise((resolve, reject) => {\n      client.on('ready', resolve);\n      client.on('error', reject);\n      \n      client.connect({\n        host: server.ipAddress,\n        port: server.sshPort,\n        username: server.username,\n        password: this.decrypt(server.password),\n        privateKey: server.privateKey ? this.decrypt(server.privateKey) : undefined,\n        readyTimeout: 10000\n      });\n    });\n    \n    this.connectionPool.set(serverId, client);\n    return client;\n  }\n}\n```",
        "testStrategy": "1. Mock SSH 서버를 사용한 연결 테스트\n2. 다양한 SSH 명령어 실행 및 결과 파싱 테스트\n3. 연결 풀 동작 검증 (재사용, 타임아웃, 정리)\n4. 암호화/복호화 기능 단위 테스트\n5. 동시 다중 서버 접속 시 성능 테스트",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Docker 컨테이너 관리 API 구현",
        "description": "Docker Remote API를 통한 컨테이너 관리 기능 구현, 배포 템플릿 시스템 개발, 컨테이너 라이프사이클 관리",
        "details": "1. Docker Remote API 클라이언트 설정 (dockerode 라이브러리)\n2. 컨테이너 생성/시작/중지/삭제 API 구현\n3. 배포 템플릿 모델 및 CRUD API 개발\n4. 이미지 pull 및 빌드 기능 구현\n5. 포트 매핑, 볼륨 마운트, 환경변수 관리\n6. 컨테이너 로그 스트리밍 API\n7. Docker Compose 파일 파싱 및 실행\n\n```typescript\n// docker.service.ts\nimport Docker from 'dockerode';\n\nexport class DockerService {\n  private dockerClients: Map<string, Docker> = new Map();\n  \n  async deployContainer(serverId: string, template: DeploymentTemplate): Promise<Container> {\n    const docker = await this.getDockerClient(serverId);\n    \n    // 이미지 pull\n    await docker.pull(template.image);\n    \n    // 컨테이너 생성 옵션\n    const createOptions = {\n      Image: template.image,\n      name: template.name,\n      Env: Object.entries(template.environment).map(([k, v]) => `${k}=${v}`),\n      HostConfig: {\n        PortBindings: this.formatPortBindings(template.ports),\n        Binds: template.volumes.map(v => `${v.host}:${v.container}`),\n        RestartPolicy: { Name: 'unless-stopped' }\n      },\n      Labels: {\n        'synology.dashboard.service': template.serviceId,\n        'synology.dashboard.deployment': template.deploymentId\n      }\n    };\n    \n    const container = await docker.createContainer(createOptions);\n    await container.start();\n    \n    return container;\n  }\n  \n  async streamContainerLogs(serverId: string, containerId: string): Promise<NodeJS.ReadableStream> {\n    const docker = await this.getDockerClient(serverId);\n    const container = docker.getContainer(containerId);\n    \n    return await container.logs({\n      stdout: true,\n      stderr: true,\n      follow: true,\n      timestamps: true\n    });\n  }\n}\n```",
        "testStrategy": "1. Docker API 연결 및 인증 테스트\n2. 컨테이너 전체 라이프사이클 테스트 (생성->실행->중지->삭제)\n3. 다양한 배포 템플릿으로 컨테이너 생성 테스트\n4. 로그 스트리밍 실시간 동작 확인\n5. 동시 다중 배포 시나리오 테스트",
        "priority": "high",
        "dependencies": [
          4
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "실시간 모니터링 시스템 구현",
        "description": "WebSocket을 사용한 실시간 서버/서비스 상태 모니터링, 헬스체크 시스템 구현, 리소스 사용량 수집 및 저장",
        "details": "1. Socket.io 서버 설정 및 네임스페이스 구성\n2. 서버 리소스 모니터링 스케줄러 구현 (5초 간격)\n3. HTTP/HTTPS 헬스체크 모듈 개발\n4. 시계열 데이터 저장을 위한 Redis 구조 설계\n5. 모니터링 데이터 집계 및 통계 API\n6. 서비스 상태 변경 이벤트 시스템\n\n```typescript\n// monitoring.service.ts\nimport { Server } from 'socket.io';\nimport axios from 'axios';\nimport { CronJob } from 'cron';\n\nexport class MonitoringService {\n  private io: Server;\n  private monitoringJobs: Map<string, CronJob> = new Map();\n  \n  constructor(io: Server) {\n    this.io = io;\n  }\n  \n  startServerMonitoring(serverId: string) {\n    const job = new CronJob('*/5 * * * * *', async () => {\n      try {\n        const metrics = await this.collectServerMetrics(serverId);\n        \n        // Redis에 시계열 데이터 저장\n        await this.saveMetrics(serverId, metrics);\n        \n        // WebSocket으로 실시간 전송\n        this.io.to(`server:${serverId}`).emit('metrics', {\n          serverId,\n          timestamp: new Date(),\n          metrics\n        });\n        \n        // 임계치 체크\n        await this.checkThresholds(serverId, metrics);\n      } catch (error) {\n        console.error(`Monitoring error for server ${serverId}:`, error);\n      }\n    });\n    \n    job.start();\n    this.monitoringJobs.set(serverId, job);\n  }\n  \n  private async collectServerMetrics(serverId: string) {\n    const sshService = new SSHService();\n    \n    const [cpu, memory, disk] = await Promise.all([\n      sshService.executeCommand(serverId, \"top -bn1 | grep 'Cpu(s)' | awk '{print $2}' | cut -d'%' -f1\"),\n      sshService.executeCommand(serverId, \"free | grep Mem | awk '{print ($3/$2) * 100.0}'\"),\n      sshService.executeCommand(serverId, \"df -h / | awk 'NR==2 {print $5}' | cut -d'%' -f1\")\n    ]);\n    \n    return {\n      cpuUsage: parseFloat(cpu),\n      memoryUsage: parseFloat(memory),\n      diskUsage: parseFloat(disk)\n    };\n  }\n}\n```",
        "testStrategy": "1. WebSocket 연결 및 이벤트 전송 테스트\n2. 모니터링 스케줄러 정확성 검증 (5초 간격)\n3. 다양한 헬스체크 시나리오 테스트 (성공/실패/타임아웃)\n4. Redis 시계열 데이터 저장 및 조회 성능 테스트\n5. 임계치 초과 시 알림 발생 확인",
        "priority": "medium",
        "dependencies": [
          4,
          5
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "알림 시스템 및 이벤트 처리 구현",
        "description": "이메일, Slack 알림 시스템 구현, 알림 규칙 엔진 개발, 이벤트 큐 시스템 구축",
        "details": "1. 알림 채널 추상화 인터페이스 설계\n2. SMTP 이메일 알림 모듈 구현 (nodemailer)\n3. Slack Webhook 연동 모듈 개발\n4. 알림 규칙 모델 및 평가 엔진 구현\n5. Bull Queue를 사용한 비동기 알림 처리\n6. 알림 이력 저장 및 재전송 기능\n7. 알림 템플릿 시스템 구현\n\n```typescript\n// notification.service.ts\nimport Bull from 'bull';\nimport nodemailer from 'nodemailer';\nimport axios from 'axios';\n\ninterface NotificationChannel {\n  send(notification: Notification): Promise<void>;\n}\n\nexport class NotificationService {\n  private notificationQueue: Bull.Queue;\n  private channels: Map<string, NotificationChannel> = new Map();\n  \n  constructor() {\n    this.notificationQueue = new Bull('notifications', {\n      redis: process.env.REDIS_URL\n    });\n    \n    this.setupChannels();\n    this.processQueue();\n  }\n  \n  async sendNotification(alert: Alert) {\n    const notification = {\n      id: generateId(),\n      alertId: alert.id,\n      serverId: alert.serverId,\n      serviceId: alert.serviceId,\n      type: alert.type,\n      severity: alert.severity,\n      message: this.formatMessage(alert),\n      channels: alert.channels,\n      timestamp: new Date()\n    };\n    \n    await this.notificationQueue.add('send', notification, {\n      attempts: 3,\n      backoff: {\n        type: 'exponential',\n        delay: 2000\n      }\n    });\n  }\n  \n  private processQueue() {\n    this.notificationQueue.process('send', async (job) => {\n      const notification = job.data;\n      \n      await Promise.all(\n        notification.channels.map(channelType => \n          this.channels.get(channelType)?.send(notification)\n        )\n      );\n      \n      await this.saveNotificationHistory(notification);\n    });\n  }\n}\n\nclass SlackChannel implements NotificationChannel {\n  async send(notification: Notification) {\n    const webhook = process.env.SLACK_WEBHOOK_URL;\n    \n    await axios.post(webhook, {\n      text: notification.message,\n      attachments: [{\n        color: this.getSeverityColor(notification.severity),\n        fields: [\n          { title: 'Server', value: notification.serverId, short: true },\n          { title: 'Service', value: notification.serviceId, short: true },\n          { title: 'Time', value: notification.timestamp, short: true }\n        ]\n      }]\n    });\n  }\n}\n```",
        "testStrategy": "1. 각 알림 채널별 전송 성공/실패 테스트\n2. 알림 규칙 평가 엔진 단위 테스트\n3. 큐 처리 및 재시도 로직 검증\n4. 동시 다중 알림 발송 시 성능 테스트\n5. 알림 템플릿 렌더링 정확성 확인",
        "priority": "medium",
        "dependencies": [
          6
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "React 프론트엔드 UI 구현",
        "description": "React 컴포넌트 아키텍처 설계, Ant Design UI 구현, 상태 관리 시스템 구축, 실시간 데이터 업데이트 구현",
        "details": "1. React 프로젝트 구조 설정 (pages/, components/, hooks/, services/)\n2. React Router 설정 및 레이아웃 컴포넌트 구현\n3. Redux Toolkit 또는 Zustand 상태 관리 설정\n4. Ant Design 테마 커스터마이징\n5. 주요 페이지 컴포넌트 구현:\n   - Dashboard (메인 대시보드)\n   - ServerManagement (서버 관리)\n   - DeploymentWizard (배포 마법사)\n   - ServiceMonitoring (서비스 모니터링)\n   - Settings (설정)\n6. Socket.io 클라이언트 연동 및 실시간 업데이트\n7. Chart.js를 사용한 차트 컴포넌트 구현\n\n```typescript\n// Dashboard.tsx\nimport React, { useEffect } from 'react';\nimport { Row, Col, Card, Statistic, Progress } from 'antd';\nimport { ServerOutlined, AppstoreOutlined, AlertOutlined } from '@ant-design/icons';\nimport { useSocket } from '../hooks/useSocket';\nimport { useAppSelector, useAppDispatch } from '../store';\nimport ServerStatusGrid from '../components/ServerStatusGrid';\nimport ResourceChart from '../components/ResourceChart';\n\nconst Dashboard: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { servers, services, alerts } = useAppSelector(state => state.dashboard);\n  const socket = useSocket();\n  \n  useEffect(() => {\n    // 실시간 메트릭 구독\n    socket.on('metrics', (data) => {\n      dispatch(updateServerMetrics(data));\n    });\n    \n    // 초기 데이터 로드\n    dispatch(fetchDashboardData());\n    \n    return () => {\n      socket.off('metrics');\n    };\n  }, []);\n  \n  return (\n    <div className=\"dashboard\">\n      <Row gutter={[16, 16]}>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Total Servers\"\n              value={servers.total}\n              prefix={<ServerOutlined />}\n              suffix={\n                <span style={{ fontSize: 14 }}>\n                  {servers.online} online\n                </span>\n              }\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Running Services\"\n              value={services.running}\n              prefix={<AppstoreOutlined />}\n              valueStyle={{ color: '#3f8600' }}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Active Alerts\"\n              value={alerts.active}\n              prefix={<AlertOutlined />}\n              valueStyle={{ color: alerts.active > 0 ? '#cf1322' : '#3f8600' }}\n            />\n          </Card>\n        </Col>\n      </Row>\n      \n      <Row gutter={[16, 16]} style={{ marginTop: 16 }}>\n        <Col span={24}>\n          <ServerStatusGrid servers={servers.list} />\n        </Col>\n      </Row>\n      \n      <Row gutter={[16, 16]} style={{ marginTop: 16 }}>\n        <Col span={24}>\n          <ResourceChart data={servers.metrics} />\n        </Col>\n      </Row>\n    </div>\n  );\n};\n```",
        "testStrategy": "1. 컴포넌트 렌더링 및 상호작용 테스트 (React Testing Library)\n2. 상태 관리 플로우 테스트 (액션 -> 리듀서 -> UI 업데이트)\n3. WebSocket 실시간 업데이트 통합 테스트\n4. 반응형 레이아웃 테스트 (다양한 화면 크기)\n5. 차트 및 데이터 시각화 정확성 검증",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "배포 워크플로우 및 롤백 시스템 구현",
        "description": "단계별 배포 프로세스 구현, 배포 진행상황 추적, 롤백 메커니즘 개발, 배포 이력 관리",
        "details": "1. 배포 상태 머신 설계 (pending -> validating -> pulling -> creating -> running -> completed/failed)\n2. 배포 트랜잭션 관리 시스템 구현\n3. 배포 단계별 검증 로직 구현\n4. 컨테이너 스냅샷 및 롤백 기능 개발\n5. 배포 로그 실시간 스트리밍\n6. 블루-그린 배포 전략 구현\n7. 배포 승인 워크플로우 (선택적)\n\n```typescript\n// deployment.service.ts\nimport { StateMachine } from 'xstate';\n\nexport class DeploymentService {\n  private deploymentMachine = StateMachine({\n    id: 'deployment',\n    initial: 'pending',\n    states: {\n      pending: {\n        on: { START: 'validating' }\n      },\n      validating: {\n        invoke: {\n          src: 'validateDeployment',\n          onDone: 'pulling',\n          onError: 'failed'\n        }\n      },\n      pulling: {\n        invoke: {\n          src: 'pullImage',\n          onDone: 'creating',\n          onError: 'failed'\n        }\n      },\n      creating: {\n        invoke: {\n          src: 'createContainer',\n          onDone: 'healthChecking',\n          onError: 'rollback'\n        }\n      },\n      healthChecking: {\n        invoke: {\n          src: 'performHealthCheck',\n          onDone: 'completed',\n          onError: 'rollback'\n        }\n      },\n      rollback: {\n        invoke: {\n          src: 'rollbackDeployment',\n          onDone: 'failed'\n        }\n      },\n      completed: { type: 'final' },\n      failed: { type: 'final' }\n    }\n  });\n  \n  async deployService(deploymentRequest: DeploymentRequest): Promise<Deployment> {\n    const deployment = await this.createDeployment(deploymentRequest);\n    \n    // 이전 컨테이너 백업\n    const backup = await this.backupCurrentContainer(deployment.serviceId);\n    \n    try {\n      // 상태 머신 실행\n      await this.runDeploymentMachine(deployment);\n      \n      // 성공 시 이전 컨테이너 정리\n      await this.cleanupBackup(backup);\n      \n      return deployment;\n    } catch (error) {\n      // 실패 시 자동 롤백\n      await this.performRollback(deployment, backup);\n      throw error;\n    }\n  }\n  \n  private async performHealthCheck(deployment: Deployment): Promise<void> {\n    const maxAttempts = 30;\n    const interval = 2000;\n    \n    for (let i = 0; i < maxAttempts; i++) {\n      try {\n        const response = await axios.get(deployment.healthCheckUrl, {\n          timeout: 5000\n        });\n        \n        if (response.status === 200) {\n          return;\n        }\n      } catch (error) {\n        if (i === maxAttempts - 1) {\n          throw new Error('Health check failed after maximum attempts');\n        }\n      }\n      \n      await new Promise(resolve => setTimeout(resolve, interval));\n    }\n  }\n}\n```",
        "testStrategy": "1. 배포 상태 전환 로직 단위 테스트\n2. 전체 배포 플로우 E2E 테스트 (성공/실패 시나리오)\n3. 롤백 메커니즘 동작 검증\n4. 동시 다중 배포 시 격리성 테스트\n5. 배포 중단 및 재개 기능 테스트",
        "priority": "medium",
        "dependencies": [
          5,
          8
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "성능 최적화 및 보안 강화",
        "description": "API 응답 시간 최적화, 캐싱 전략 구현, 보안 감사 로그 시스템 구축, 성능 모니터링 도구 통합",
        "details": "1. Redis 캐싱 레이어 구현 (서버 상태, 메트릭 데이터)\n2. API 응답 압축 및 페이지네이션 구현\n3. 데이터베이스 쿼리 최적화 (인덱싱, N+1 문제 해결)\n4. 감사 로그 시스템 구현 (모든 쓰기 작업 기록)\n5. Rate limiting 및 DDoS 방어 구현\n6. 보안 헤더 설정 (Helmet.js)\n7. API 성능 모니터링 (APM 도구 연동)\n8. 프론트엔드 번들 최적화 및 코드 스플리팅\n\n```typescript\n// cache.middleware.ts\nimport Redis from 'ioredis';\nimport { Request, Response, NextFunction } from 'express';\n\nconst redis = new Redis(process.env.REDIS_URL);\n\nexport const cacheMiddleware = (ttl: number = 60) => {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    if (req.method !== 'GET') {\n      return next();\n    }\n    \n    const key = `cache:${req.originalUrl}`;\n    const cached = await redis.get(key);\n    \n    if (cached) {\n      return res.json(JSON.parse(cached));\n    }\n    \n    // 원본 json 메서드 저장\n    const originalJson = res.json.bind(res);\n    \n    res.json = (data: any) => {\n      // 캐시에 저장\n      redis.setex(key, ttl, JSON.stringify(data));\n      return originalJson(data);\n    };\n    \n    next();\n  };\n};\n\n// audit.service.ts\nexport class AuditService {\n  async logActivity(activity: AuditActivity) {\n    const auditLog = {\n      id: generateId(),\n      userId: activity.userId,\n      action: activity.action,\n      resource: activity.resource,\n      resourceId: activity.resourceId,\n      changes: activity.changes,\n      ipAddress: activity.ipAddress,\n      userAgent: activity.userAgent,\n      timestamp: new Date(),\n      result: activity.result\n    };\n    \n    await prisma.auditLog.create({ data: auditLog });\n    \n    // 중요 작업은 즉시 알림\n    if (this.isCriticalAction(activity.action)) {\n      await this.notificationService.sendSecurityAlert(auditLog);\n    }\n  }\n}\n\n// security.middleware.ts\nimport rateLimit from 'express-rate-limit';\nimport helmet from 'helmet';\n\nexport const securityMiddleware = [\n  helmet({\n    contentSecurityPolicy: {\n      directives: {\n        defaultSrc: [\"'self'\"],\n        scriptSrc: [\"'self'\", \"'unsafe-inline'\"],\n        styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n        imgSrc: [\"'self'\", \"data:\", \"https:\"]\n      }\n    }\n  }),\n  \n  rateLimit({\n    windowMs: 15 * 60 * 1000, // 15분\n    max: 100, // 최대 100개 요청\n    standardHeaders: true,\n    legacyHeaders: false,\n    handler: (req, res) => {\n      res.status(429).json({\n        error: 'Too many requests, please try again later.'\n      });\n    }\n  })\n];\n```",
        "testStrategy": "1. 캐싱 동작 검증 (캐시 히트/미스, TTL 만료)\n2. API 응답 시간 측정 (목표: <2초)\n3. 부하 테스트 수행 (10명 동시 사용자)\n4. 보안 스캔 도구 실행 (OWASP ZAP)\n5. 감사 로그 완전성 및 무결성 검증",
        "priority": "medium",
        "dependencies": [
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "통합 테스트 및 문서화",
        "description": "E2E 테스트 시나리오 작성, API 문서 자동화, 사용자 매뉴얼 작성, CI/CD 파이프라인 구축",
        "details": "1. Cypress E2E 테스트 환경 설정\n2. 주요 사용자 시나리오 테스트 작성\n3. Jest 단위/통합 테스트 커버리지 80% 달성\n4. Swagger/OpenAPI 문서 자동 생성\n5. 사용자 가이드 및 관리자 매뉴얼 작성\n6. GitHub Actions CI/CD 파이프라인 구성\n7. Docker 이미지 빌드 및 레지스트리 푸시 자동화\n\n```yaml\n# .github/workflows/ci-cd.yml\nname: CI/CD Pipeline\n\non:\n  push:\n    branches: [main, develop]\n  pull_request:\n    branches: [main]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    services:\n      postgres:\n        image: postgres:15\n        env:\n          POSTGRES_PASSWORD: testpass\n        options: >-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      redis:\n        image: redis:7-alpine\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n    \n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Setup Node.js\n      uses: actions/setup-node@v3\n      with:\n        node-version: '18'\n        cache: 'npm'\n    \n    - name: Install dependencies\n      run: |\n        npm ci --prefix backend\n        npm ci --prefix frontend\n    \n    - name: Run backend tests\n      run: npm test --prefix backend -- --coverage\n      env:\n        DATABASE_URL: postgresql://postgres:testpass@localhost:5432/test\n        REDIS_URL: redis://localhost:6379\n    \n    - name: Run frontend tests\n      run: npm test --prefix frontend -- --coverage\n    \n    - name: Run E2E tests\n      run: npm run test:e2e\n    \n    - name: Build Docker images\n      if: github.ref == 'refs/heads/main'\n      run: |\n        docker build -t synology-dashboard-backend ./backend\n        docker build -t synology-dashboard-frontend ./frontend\n    \n    - name: Push to registry\n      if: github.ref == 'refs/heads/main'\n      run: |\n        echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin\n        docker push synology-dashboard-backend\n        docker push synology-dashboard-frontend\n```\n\n```typescript\n// cypress/e2e/deployment.cy.ts\ndescribe('Deployment Workflow', () => {\n  beforeEach(() => {\n    cy.login('admin@example.com', 'password');\n    cy.visit('/deployments');\n  });\n  \n  it('should deploy a new service successfully', () => {\n    cy.get('[data-testid=\"new-deployment\"]').click();\n    \n    // Step 1: Select server\n    cy.get('[data-testid=\"server-select\"]').select('production-server-1');\n    cy.get('[data-testid=\"next-step\"]').click();\n    \n    // Step 2: Select template\n    cy.get('[data-testid=\"template-nginx\"]').click();\n    cy.get('[data-testid=\"next-step\"]').click();\n    \n    // Step 3: Configure\n    cy.get('[data-testid=\"port-input\"]').type('8080');\n    cy.get('[data-testid=\"env-vars\"]').type('NODE_ENV=production');\n    cy.get('[data-testid=\"deploy-button\"]').click();\n    \n    // Verify deployment progress\n    cy.get('[data-testid=\"deployment-progress\"]').should('be.visible');\n    cy.get('[data-testid=\"deployment-status\"]', { timeout: 60000 })\n      .should('contain', 'Completed');\n  });\n});\n```",
        "testStrategy": "1. 전체 테스트 스위트 실행 및 커버리지 확인\n2. E2E 테스트로 주요 워크플로우 검증\n3. API 문서 자동 생성 및 정확성 확인\n4. CI/CD 파이프라인 동작 검증\n5. 문서 리뷰 및 사용성 테스트",
        "priority": "low",
        "dependencies": [
          10
        ],
        "status": "done",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-07-26T11:58:21.903Z",
      "updated": "2025-07-26T15:03:56.191Z",
      "description": "Tasks for master context"
    }
  }
}