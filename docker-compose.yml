version: '3.9'

services:
  postgres:
    image: postgres:16-alpine
    container_name: synology-dashboard-db
    environment:
      POSTGRES_USER: ${DB_USER:-dashboard}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-dashboard123}
      POSTGRES_DB: ${DB_NAME:-synology_dashboard}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5433}:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-dashboard}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - synology-network

  redis:
    image: redis:7-alpine
    container_name: synology-dashboard-redis
    command: redis-server --appendonly yes
    ports:
      - "${REDIS_PORT:-6380}:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - synology-network

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: synology-dashboard
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DB_USER:-dashboard}:${DB_PASSWORD:-dashboard123}@postgres:5432/${DB_NAME:-synology_dashboard}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-super-secret-refresh-key}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-your-32-char-encryption-key-here}
      PORT: 3000
    ports:
      - "${APP_PORT:-3000}:3000"
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - synology-network

  nginx:
    image: nginx:alpine
    container_name: synology-dashboard-nginx
    depends_on:
      - app
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    restart: unless-stopped
    networks:
      - synology-network

volumes:
  postgres_data:
  redis_data:

networks:
  synology-network:
    driver: bridge